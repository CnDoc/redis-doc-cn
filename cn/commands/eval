<!DOCTYPE html>
<html>
  <head>
    <meta charset='utf-8' />
    <link href='../styles.css?1333128600' rel='stylesheet' type='text/css' />
    <link href='../images/favicon.png' rel='shortcut icon' />
    <link href='../opensearch.xml' rel='search' title='Look up a Redis command' type='application/opensearchdescription+xml' />
    <script src='http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js'></script>
    <script async='async' defer='defer' src='../app.js?1375789679'></script>
    <meta content='width=device-width, minimum-scale=1.0, maximum-scale=1.0' name='viewport' />
    <title>
      EVAL – Redis
    </title>
    <script type='text/javascript'>
      //<![CDATA[
         var _gaq = _gaq || [];
         _gaq.push(['_setAccount', 'UA-20243082-1']);
         _gaq.push(['_trackPageview']);
        
         (function() {
           var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
           ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
           var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
         })();
      //]]>
    </script>
  </head>
  <body class=''><style type="text/css">#modify_div {position: fixed;right: 0px;top: 50px;	background-color: #000000;	height: 30px;width: 100px;border-top-width: 2px;border-right-width: 2px;border-bottom-width: 2px;border-left-width: 2px;border-top-style: dashed;border-right-style: none;border-bottom-style: dashed;border-left-style: dashed;border-top-color: #333333;border-right-color: #333333;border-bottom-color: #333333;border-left-color: #333333;}#modify {display: block;position: fixed;right: 23px;top: 60px;color: #FFFFFF;text-decoration: none;font-size: 12px;font-weight: bold;}#modify:hover {text-decoration: underline;}</style><div id="modify_div"></div><a href="https://github.com/jialechan/redis-doc-cn/edit/gh-pages/cn/commands/eval" id="modify" target="_blank">修改本页</a><script>$('#modify_div').css('opacity', '0.6');	</script>
    <header>
      <div class='container'>
        <a href='../index.html'>
          <img alt='Redis' height='30' src='../images/redis.png' width='93' />
        </a>
        <nav>
          <a href='../commands'>Commands</a>
          <a href='../clients'>Clients</a>
          <a href='../documentation'>Documentation</a>
          <a href='../community'>Community</a>
          <a href='../download'>Download</a>
          <a href='https://github.com/antirez/redis/issues'>Issues</a>
          <a href='../support'>Support</a>
          <a href='../topics/license'>License</a>
        </nav>
      </div>
    </header>
    <div class='text'>
      <h1 class='command'>
        <span class='name'>EVAL</span>
        <span class='arg'>script</span>
        <span class='arg'>numkeys</span>
        <span class='arg'>key [key ...]</span>
        <span class='arg'>arg [arg ...]</span>
      </h1>
      <article>
        <aside>
          <h2>
            Related commands
          </h2>
          <ul>
            <li>
              <a href='eval'>
                <strong>EVAL</strong>
              </a>
            </li>
            <li>
              <a href='evalsha'>
                EVALSHA
              </a>
            </li>
            <li>
              <a href='script-exists'>
                SCRIPT EXISTS
              </a>
            </li>
            <li>
              <a href='script-flush'>
                SCRIPT FLUSH
              </a>
            </li>
            <li>
              <a href='script-kill'>
                SCRIPT KILL
              </a>
            </li>
            <li>
              <a href='script-load'>
                SCRIPT LOAD
              </a>
            </li>
          </ul>
        </aside>
        <div class='metadata'>
          <p><strong>Available since 2.6.0.</strong></p>
          <p><strong>Time complexity:</strong> Depends on the script that is executed.</p>
        </div>
        <h2>Introduction to EVAL</h2>
        
        <p><a href="eval">EVAL</a> and <a href="evalsha">EVALSHA</a> are used to evaluate scripts using the Lua interpreter
        built into Redis starting from version 2.6.0.</p>
        
        <p>The first argument of <a href="eval">EVAL</a> is a Lua 5.1 script.
        The script does not need to define a Lua function (and should not).
        It is just a Lua program that will run in the context of the Redis server.</p>
        
        <p>The second argument of <a href="eval">EVAL</a> is the number of arguments that follows the script
        (starting from the third argument) that represent Redis key names.
        This arguments can be accessed by Lua using the <a href="keys">KEYS</a> global variable in the
        form of a one-based array (so <code>KEYS[1]</code>, <code>KEYS[2]</code>, ...).</p>
        
        <p>All the additional arguments should not represent key names and can be accessed
        by Lua using the <code>ARGV</code> global variable, very similarly to what happens with
        keys (so <code>ARGV[1]</code>, <code>ARGV[2]</code>, ...).</p>
        
        <p>The following example should clarify what stated above:</p>
        
        <pre><code>&gt; eval &quot;return {KEYS[1],KEYS[2],ARGV[1],ARGV[2]}&quot; 2 key1 key2 first second&#x000A;1) &quot;key1&quot;&#x000A;2) &quot;key2&quot;&#x000A;3) &quot;first&quot;&#x000A;4) &quot;second&quot;&#x000A;</code></pre>
        
        <p>Note: as you can see Lua arrays are returned as Redis multi bulk replies, that
        is a Redis return type that your client library will likely convert into an
        Array type in your programming language.</p>
        
        <p>It is possible to call Redis commands from a Lua script using two different Lua
        functions:</p>
        
        <ul>
        <li><code>redis.call()</code></li>
        <li><code>redis.pcall()</code></li>
        </ul>
        
        <p><code>redis.call()</code> is similar to <code>redis.pcall()</code>, the only difference is that if a
        Redis command call will result into an error, <code>redis.call()</code> will raise a Lua
        error that in turn will force <a href="eval">EVAL</a> to return an error to the command caller,
        while <code>redis.pcall</code> will trap the error returning a Lua table representing the
        error.</p>
        
        <p>The arguments of the <code>redis.call()</code> and <code>redis.pcall()</code> functions are simply all
        the arguments of a well formed Redis command:</p>
        
        <pre><code>&gt; eval &quot;return redis.call(&#39;set&#39;,&#39;foo&#39;,&#39;bar&#39;)&quot; 0&#x000A;OK&#x000A;</code></pre>
        
        <p>The above script actually sets the key <code>foo</code> to the string <code>bar</code>.
        However it violates the <a href="eval">EVAL</a> command semantics as all the keys that the script
        uses should be passed using the KEYS array, in the following way:</p>
        
        <pre><code>&gt; eval &quot;return redis.call(&#39;set&#39;,KEYS[1],&#39;bar&#39;)&quot; 1 foo&#x000A;OK&#x000A;</code></pre>
        
        <p>The reason for passing keys in the proper way is that, before <a href="eval">EVAL</a> all the
        Redis commands could be analyzed before execution in order to establish what
        keys the command will operate on.</p>
        
        <p>In order for this to be true for <a href="eval">EVAL</a> also keys must be explicit.
        This is useful in many ways, but especially in order to make sure Redis Cluster
        is able to forward your request to the appropriate cluster node (Redis Cluster
        is a work in progress, but the scripting feature was designed in order to play
        well with it).
        However this rule is not enforced in order to provide the user with
        opportunities to abuse the Redis single instance configuration, at the cost of
        writing scripts not compatible with Redis Cluster.</p>
        
        <p>Lua scripts can return a value, that is converted from the Lua type to the Redis
        protocol using a set of conversion rules.</p>
        
        <h2>Conversion between Lua and Redis data types</h2>
        
        <p>Redis return values are converted into Lua data types when Lua calls a Redis
        command using call() or pcall().
        Similarly Lua data types are converted into the Redis protocol when a Lua script
        returns a value, so that scripts can control what <a href="eval">EVAL</a> will return to the
        client.</p>
        
        <p>This conversion between data types is designed in a way that if a Redis type is
        converted into a Lua type, and then the result is converted back into a Redis
        type, the result is the same as of the initial value.</p>
        
        <p>In other words there is a one-to-one conversion between Lua and Redis types.
        The following table shows you all the conversions rules:</p>
        
        <p><strong>Redis to Lua</strong> conversion table.</p>
        
        <ul>
        <li>Redis integer reply -&gt; Lua number</li>
        <li>Redis bulk reply -&gt; Lua string</li>
        <li>Redis multi bulk reply -&gt; Lua table (may have other Redis data types nested)</li>
        <li>Redis status reply -&gt; Lua table with a single <code>ok</code> field containing the status</li>
        <li>Redis error reply -&gt; Lua table with a single <code>err</code> field containing the error</li>
        <li>Redis Nil bulk reply and Nil multi bulk reply -&gt; Lua false boolean type</li>
        </ul>
        
        <p><strong>Lua to Redis</strong> conversion table.</p>
        
        <ul>
        <li>Lua number -&gt; Redis integer reply (the number is converted into an integer)</li>
        <li>Lua string -&gt; Redis bulk reply</li>
        <li>Lua table (array) -&gt; Redis multi bulk reply (truncated to the first nil inside the Lua array if any)</li>
        <li>Lua table with a single <code>ok</code> field -&gt; Redis status reply</li>
        <li>Lua table with a single <code>err</code> field -&gt; Redis error reply</li>
        <li>Lua boolean false -&gt; Redis Nil bulk reply.</li>
        </ul>
        
        <p>There is an additional Lua-to-Redis conversion rule that has no corresponding
        Redis to Lua conversion rule:</p>
        
        <ul>
        <li>Lua boolean true -&gt; Redis integer reply with value of 1.</li>
        </ul>
        
        <p>Also there are two important rules to note:</p>
        
        <ul>
        <li>Lua has a single numerical type, Lua numbers. There is no distinction between integers and floats. So we always convert Lua numbers into integer replies, removing the decimal part of the number if any. <strong>If you want to return a float from Lua you should return it as a string</strong>, exactly like Redis itself does (see for instance the <a href="zscore">ZSCORE</a> command).</li>
        <li>There is <a href="http://www.lua.org/pil/19.1.html">no simple way to have nils inside Lua arrays</a>, this is a result of Lua table semantics, so when Redis converts a Lua array into Redis protocol the conversion is stopped if a nil is encountered.</li>
        </ul>
        
        <p>Here are a few conversion examples:</p>
        
        <pre><code>&gt; eval &quot;return 10&quot; 0&#x000A;(integer) 10&#x000A;&#x000A;&gt; eval &quot;return {1,2,{3,&#39;Hello World!&#39;}}&quot; 0&#x000A;1) (integer) 1&#x000A;2) (integer) 2&#x000A;3) 1) (integer) 3&#x000A;   2) &quot;Hello World!&quot;&#x000A;&#x000A;&gt; eval &quot;return redis.call(&#39;get&#39;,&#39;foo&#39;)&quot; 0&#x000A;&quot;bar&quot;&#x000A;</code></pre>
        
        <p>The last example shows how it is possible to receive the exact return value of
        <code>redis.call()</code> or <code>redis.pcall()</code> from Lua that would be returned if the command
        was called directly.</p>
        
        <p>In the following example we can see how floats and arrays with nils are handled:</p>
        
        <pre><code>&gt; eval &quot;return {1,2,3.3333,&#39;foo&#39;,nil,&#39;bar&#39;}&quot; 0&#x000A;1) (integer) 1&#x000A;2) (integer) 2&#x000A;3) (integer) 3&#x000A;4) &quot;foo&quot;&#x000A;</code></pre>
        
        <p>As you can see 3.333 is converted into 3, and the <em>bar</em> string is never returned as there is a nil before.</p>
        
        <h2>Helper functions to return Redis types</h2>
        
        <p>There are two helper functions to return Redis types from Lua.</p>
        
        <ul>
        <li><code>redis.error_reply(error_string)</code> returns an error reply. This function simply returns the single field table with the <code>err</code> field set to the specified string for you.</li>
        <li><code>redis.status_reply(status_string)</code> returns a status reply. This function simply returns the single field table with the <code>ok</code> field set to the specified string for you.</li>
        </ul>
        
        <p>There is no difference between using the helper functions or directly returning the table with the specified format, so the following two forms are equivalent:</p>
        
        <pre><code>return {err=&quot;My Error&quot;}&#x000A;return redis.error_reply(&quot;My Error&quot;)&#x000A;</code></pre>
        
        <h2>Atomicity of scripts</h2>
        
        <p>Redis uses the same Lua interpreter to run all the commands.
        Also Redis guarantees that a script is executed in an atomic way: no other
        script or Redis command will be executed while a script is being executed.
        This semantics is very similar to the one of <a href="multi">MULTI</a> / <a href="exec">EXEC</a>.
        From the point of view of all the other clients the effects of a script are
        either still not visible or already completed.</p>
        
        <p>However this also means that executing slow scripts is not a good idea.
        It is not hard to create fast scripts, as the script overhead is very low, but
        if you are going to use slow scripts you should be aware that while the script
        is running no other client can execute commands since the server is busy.</p>
        
        <h2>Error handling</h2>
        
        <p>As already stated, calls to <code>redis.call()</code> resulting in a Redis command error
        will stop the execution of the script and will return the error, in a way that
        makes it obvious that the error was generated by a script:</p>
        
        <pre><code>&gt; del foo&#x000A;(integer) 1&#x000A;&gt; lpush foo a&#x000A;(integer) 1&#x000A;&gt; eval &quot;return redis.call(&#39;get&#39;,&#39;foo&#39;)&quot; 0&#x000A;(error) ERR Error running script (call to f_6b1bf486c81ceb7edf3c093f4c48582e38c0e791): ERR Operation against a key holding the wrong kind of value&#x000A;</code></pre>
        
        <p>Using the <code>redis.pcall()</code> command no error is raised, but an error object is
        returned in the format specified above (as a Lua table with an <code>err</code> field).
        The script can pass the exact error to the user by returning the error object
        returned by <code>redis.pcall()</code>.</p>
        
        <h2>Bandwidth and EVALSHA</h2>
        
        <p>The <a href="eval">EVAL</a> command forces you to send the script body again and again.
        Redis does not need to recompile the script every time as it uses an internal
        caching mechanism, however paying the cost of the additional bandwidth may not
        be optimal in many contexts.</p>
        
        <p>On the other hand, defining commands using a special command or via <code>redis.conf</code>
        would be a problem for a few reasons:</p>
        
        <ul>
        <li><p>Different instances may have different versions of a command implementation.</p></li>
        <li><p>Deployment is hard if there is to make sure all the instances contain a
        given command, especially in a distributed environment.</p></li>
        <li><p>Reading an application code the full semantic could not be clear since the
        application would call commands defined server side.</p></li>
        </ul>
        
        <p>In order to avoid these problems while avoiding the bandwidth penalty, Redis
        implements the <a href="evalsha">EVALSHA</a> command.</p>
        
        <p><a href="evalsha">EVALSHA</a> works exactly like <a href="eval">EVAL</a>, but instead of having a script as the first
        argument it has the SHA1 digest of a script.
        The behavior is the following:</p>
        
        <ul>
        <li><p>If the server still remembers a script with a matching SHA1 digest, the
        script is executed.</p></li>
        <li><p>If the server does not remember a script with this SHA1 digest, a special
        error is returned telling the client to use <a href="eval">EVAL</a> instead.</p></li>
        </ul>
        
        <p>Example:</p>
        
        <pre><code>&gt; set foo bar&#x000A;OK&#x000A;&gt; eval &quot;return redis.call(&#39;get&#39;,&#39;foo&#39;)&quot; 0&#x000A;&quot;bar&quot;&#x000A;&gt; evalsha 6b1bf486c81ceb7edf3c093f4c48582e38c0e791 0&#x000A;&quot;bar&quot;&#x000A;&gt; evalsha ffffffffffffffffffffffffffffffffffffffff 0&#x000A;(error) `NOSCRIPT` No matching script. Please use [EVAL](/commands/eval).&#x000A;</code></pre>
        
        <p>The client library implementation can always optimistically send <a href="evalsha">EVALSHA</a> under
        the hood even when the client actually calls <a href="eval">EVAL</a>, in the hope the script was
        already seen by the server.
        If the <code>NOSCRIPT</code> error is returned <a href="eval">EVAL</a> will be used instead.</p>
        
        <p>Passing keys and arguments as additional <a href="eval">EVAL</a> arguments is also very useful in
        this context as the script string remains constant and can be efficiently cached
        by Redis.</p>
        
        <h2>Script cache semantics</h2>
        
        <p>Executed scripts are guaranteed to be in the script cache of a given execution
        of a Redis instance forever. This means that if an <a href="eval">EVAL</a> is performed against a Redis instance all the subsequent <a href="evalsha">EVALSHA</a> calls will succeed.</p>
        
        <p>The reason why scripts can be cached for long time is that it is unlikely for
        a well written application to have enough different scripts to cause memory
        problems. Every script is conceptually like the implementation of a new command, and even a large application will likely have just a few hundred of them.
        Even if the application is modified many times and scripts will change, the
        memory used is negligible.</p>
        
        <p>The only way to flush the script cache is by explicitly calling the <code>SCRIPT FLUSH</code> command, which will <em>completely flush</em> the scripts cache removing all the
        scripts executed so far.</p>
        
        <p>This is usually needed only when the instance is going to be instantiated for
        another customer or application in a cloud environment.</p>
        
        <p>Also, as already mentioned, restarting a Redis instance flushes the
        script cache, which is not persistent. However from the point of view of the
        client there are only two ways to make sure a Redis instance was not restarted
        between two different commands.</p>
        
        <ul>
        <li>The connection we have with the server is persistent and was never closed so far.</li>
        <li>The client explicitly checks the <code>runid</code> field in the <a href="info">INFO</a> command in order to make sure the server was not restarted and is still the same process.</li>
        </ul>
        
        <p>Practically speaking, for the client it is much better to simply assume that in the context of a given connection, cached scripts are guaranteed to be there
        unless an administrator explicitly called the <code>SCRIPT FLUSH</code> command.</p>
        
        <p>The fact that the user can count on Redis not removing scripts is semantically
        useful in the context of pipelining.</p>
        
        <p>For instance an application with a persistent connection to Redis can be sure
        that if a script was sent once it is still in memory, so EVALSHA can be used
        against those scripts in a pipeline without the chance of an error being
        generated due to an unknown script (we&#39;ll see this problem in detail later).</p>
        
        <p>A common patter is to call <code>SCRIPT LOAD</code> to load all the scripts that will
        appear in a pipeline, then use <a href="evalsha">EVALSHA</a> directly inside the pipeline without
        any need to check for errors resulting from the script hash not being
        recognized.</p>
        
        <h2>The SCRIPT command</h2>
        
        <p>Redis offers a SCRIPT command that can be used in order to control the scripting
        subsystem.
        SCRIPT currently accepts three different commands:</p>
        
        <ul>
        <li><p>SCRIPT FLUSH.
        This command is the only way to force Redis to flush the scripts cache.
        It is most useful in a cloud environment where the same instance can be
        reassigned to a different user.
        It is also useful for testing client libraries&#39; implementations of the
        scripting feature.</p></li>
        <li><p>SCRIPT EXISTS <em>sha1</em> <em>sha2</em>... <em>shaN</em>.
        Given a list of SHA1 digests as arguments this command returns an array of
        1 or 0, where 1 means the specific SHA1 is recognized as a script already
        present in the scripting cache, while 0 means that a script with this SHA1
        was never seen before (or at least never seen after the latest SCRIPT FLUSH
        command).</p></li>
        <li><p>SCRIPT LOAD <em>script</em>.
        This command registers the specified script in the Redis script cache.
        The command is useful in all the contexts where we want to make sure that
        <a href="evalsha">EVALSHA</a> will not fail (for instance during a pipeline or MULTI/EXEC
        operation), without the need to actually execute the script.</p></li>
        <li><p>SCRIPT KILL.
        This command is the only way to interrupt a long-running script that reaches
        the configured maximum execution time for scripts.
        The SCRIPT KILL command can only be used with scripts that did not modify
        the dataset during their execution (since stopping a read-only script does
        not violate the scripting engine&#39;s guaranteed atomicity).
        See the next sections for more information about long running scripts.</p></li>
        </ul>
        
        <h2>Scripts as pure functions</h2>
        
        <p>A very important part of scripting is writing scripts that are pure functions.
        Scripts executed in a Redis instance are replicated on slaves by sending the
        script -- not the resulting commands.
        The same happens for the Append Only File.
        The reason is that sending a script to another Redis instance is much
        faster than sending the multiple commands the script generates, so if the
        client is sending many scripts to the master, converting the scripts into
        individual commands for the slave / AOF would result in too much bandwidth
        for the replication link or the Append Only File (and also too much CPU since
        dispatching a command received via network is a lot more work for Redis compared
        to dispatching a command invoked by Lua scripts).</p>
        
        <p>The only drawback with this approach is that scripts are required to have the
        following property:</p>
        
        <ul>
        <li>The script always evaluates the same Redis <em>write</em> commands with the same
        arguments given the same input data set.
        Operations performed by the script cannot depend on any hidden (non-explicit)
        information or state that may change as script execution proceeds or between
        different executions of the script, nor can it depend on any external input
        from I/O devices.</li>
        </ul>
        
        <p>Things like using the system time, calling Redis random commands like
        <a href="randomkey">RANDOMKEY</a>, or using Lua random number generator, could result into scripts
        that will not always evaluate in the same way.</p>
        
        <p>In order to enforce this behavior in scripts Redis does the following:</p>
        
        <ul>
        <li><p>Lua does not export commands to access the system time or other external
        state.</p></li>
        <li><p>Redis will block the script with an error if a script calls a Redis
        command able to alter the data set <strong>after</strong> a Redis <em>random</em> command like
        <a href="randomkey">RANDOMKEY</a>, <a href="srandmember">SRANDMEMBER</a>, <a href="time">TIME</a>.
        This means that if a script is read-only and does not modify the data set it
        is free to call those commands.
        Note that a <em>random command</em> does not necessarily mean a command that uses
        random numbers: any non-deterministic command is considered a random command
        (the best example in this regard is the <a href="time">TIME</a> command).</p></li>
        <li><p>Redis commands that may return elements in random order, like <a href="smembers">SMEMBERS</a>
        (because Redis Sets are <em>unordered</em>) have a different behavior when called
        from Lua, and undergo a silent lexicographical sorting filter before
        returning data to Lua scripts.
        So <code>redis.call(&quot;smembers&quot;,KEYS[1])</code> will always return the Set elements
        in the same order, while the same command invoked from normal clients may
        return different results even if the key contains exactly the same elements.</p></li>
        <li><p>Lua pseudo random number generation functions <code>math.random</code> and
        <code>math.randomseed</code> are modified in order to always have the same seed every
        time a new script is executed.
        This means that calling <code>math.random</code> will always generate the same sequence
        of numbers every time a script is executed if <code>math.randomseed</code> is not used.</p></li>
        </ul>
        
        <p>However the user is still able to write commands with random behavior using the
        following simple trick.
        Imagine I want to write a Redis script that will populate a list with N random
        integers.</p>
        
        <p>I can start with this small Ruby program:</p>
        
        <pre><code>require &#39;rubygems&#39;&#x000A;require &#39;redis&#39;&#x000A;&#x000A;r = Redis.new&#x000A;&#x000A;RandomPushScript = &lt;&lt;EOF&#x000A;    local i = tonumber(ARGV[1])&#x000A;    local res&#x000A;    while (i &gt; 0) do&#x000A;        res = redis.call(&#39;lpush&#39;,KEYS[1],math.random())&#x000A;        i = i-1&#x000A;    end&#x000A;    return res&#x000A;EOF&#x000A;&#x000A;r.del(:mylist)&#x000A;puts r.eval(RandomPushScript,[:mylist],[10,rand(2**32)])&#x000A;</code></pre>
        
        <p>Every time this script executed the resulting list will have exactly the
        following elements:</p>
        
        <pre><code>&gt; lrange mylist 0 -1&#x000A; 1) &quot;0.74509509873814&quot;&#x000A; 2) &quot;0.87390407681181&quot;&#x000A; 3) &quot;0.36876626981831&quot;&#x000A; 4) &quot;0.6921941534114&quot;&#x000A; 5) &quot;0.7857992587545&quot;&#x000A; 6) &quot;0.57730350670279&quot;&#x000A; 7) &quot;0.87046522734243&quot;&#x000A; 8) &quot;0.09637165539729&quot;&#x000A; 9) &quot;0.74990198051087&quot;&#x000A;10) &quot;0.17082803611217&quot;&#x000A;</code></pre>
        
        <p>In order to make it a pure function, but still be sure that every invocation
        of the script will result in different random elements, we can simply add an
        additional argument to the script that will be used in order to seed the Lua
        pseudo-random number generator.
        The new script is as follows:</p>
        
        <pre><code>RandomPushScript = &lt;&lt;EOF&#x000A;    local i = tonumber(ARGV[1])&#x000A;    local res&#x000A;    math.randomseed(tonumber(ARGV[2]))&#x000A;    while (i &gt; 0) do&#x000A;        res = redis.call(&#39;lpush&#39;,KEYS[1],math.random())&#x000A;        i = i-1&#x000A;    end&#x000A;    return res&#x000A;EOF&#x000A;&#x000A;r.del(:mylist)&#x000A;puts r.eval(RandomPushScript,1,:mylist,10,rand(2**32))&#x000A;</code></pre>
        
        <p>What we are doing here is sending the seed of the PRNG as one of the arguments.
        This way the script output will be the same given the same arguments, but we are
        changing one of the arguments in every invocation, generating the random seed
        client-side.
        The seed will be propagated as one of the arguments both in the replication
        link and in the Append Only File, guaranteeing that the same changes will be
        generated when the AOF is reloaded or when the slave processes the script.</p>
        
        <p>Note: an important part of this behavior is that the PRNG that Redis implements
        as <code>math.random</code> and <code>math.randomseed</code> is guaranteed to have the same output
        regardless of the architecture of the system running Redis.
        32-bit, 64-bit, big-endian and little-endian systems will all produce the same
        output.</p>
        
        <h2>Global variables protection</h2>
        
        <p>Redis scripts are not allowed to create global variables, in order to avoid
        leaking data into the Lua state.
        If a script needs to maintain state between calls (a pretty uncommon need) it
        should use Redis keys instead.</p>
        
        <p>When global variable access is attempted the script is terminated and EVAL
        returns with an error:</p>
        
        <pre><code>redis 127.0.0.1:6379&gt; eval &#39;a=10&#39; 0&#x000A;(error) ERR Error running script (call to f_933044db579a2f8fd45d8065f04a8d0249383e57): user_script:1: Script attempted to create global variable &#39;a&#39;&#x000A;</code></pre>
        
        <p>Accessing a <em>non existing</em> global variable generates a similar error.</p>
        
        <p>Using Lua debugging functionality or other approaches like altering the meta
        table used to implement global protections in order to circumvent globals
        protection is not hard.
        However it is difficult to do it accidentally.
        If the user messes with the Lua global state, the consistency of AOF and
        replication is not guaranteed: don&#39;t do it.</p>
        
        <p>Note for Lua newbies: in order to avoid using global variables in your scripts
        simply declare every variable you are going to use using the <em>local</em> keyword.</p>
        
        <h2>Using SELECT inside scripts</h2>
        
        <p>It is possible to call <a href="select">SELECT</a> inside Lua scripts like with normal clients,
        However one subtle aspect of the behavior changes between Redis 2.8.11 and
        Redis 2.8.12. Before the 2.8.12 release the database selected by the Lua
        script was <em>transferred</em> to the calling script as current database.
        Starting from Redis 2.8.12 the database selected by the Lua script only
        affects the execution of the script itself, but does not modify the database
        selected by the client calling the script.</p>
        
        <p>The semantical change between patch level releases was needed since the old
        behavior was inherently incompatible with the Redis replication layer and
        was the cause of bugs.</p>
        
        <h2>Available libraries</h2>
        
        <p>The Redis Lua interpreter loads the following Lua libraries:</p>
        
        <ul>
        <li>base lib.</li>
        <li>table lib.</li>
        <li>string lib.</li>
        <li>math lib.</li>
        <li>debug lib.</li>
        <li>struct lib.</li>
        <li>cjson lib.</li>
        <li>cmsgpack lib.</li>
        <li>redis.sha1hex function.</li>
        </ul>
        
        <p>Every Redis instance is <em>guaranteed</em> to have all the above libraries so you can
        be sure that the environment for your Redis scripts is always the same.</p>
        
        <p>struct, CJSON and cmsgpack are external libraries, all the other libraries are standard
        Lua libraries.</p>
        
        <h3>struct</h3>
        
        <p>struct is a library for packing/unpacking structures within Lua.</p>
        
        <pre><code>Valid formats:&#x000A;&gt; - big endian&#x000A;&lt; - little endian&#x000A;![num] - alignment&#x000A;x - pading&#x000A;b/B - signed/unsigned byte&#x000A;h/H - signed/unsigned short&#x000A;l/L - signed/unsigned long&#x000A;T   - size_t&#x000A;i/In - signed/unsigned integer with size `n&#39; (default is size of int)&#x000A;cn - sequence of `n&#39; chars (from/to a string); when packing, n==0 means&#x000A;     the whole string; when unpacking, n==0 means use the previous&#x000A;     read number as the string length&#x000A;s - zero-terminated string&#x000A;f - float&#x000A;d - double&#x000A;&#39; &#39; - ignored&#x000A;</code></pre>
        
        <p>Example:</p>
        
        <pre><code>127.0.0.1:6379&gt; eval &#39;return struct.pack(&quot;HH&quot;, 1, 2)&#39; 0&#x000A;&quot;\x01\x00\x02\x00&quot;&#x000A;3) (integer) 5&#x000A;127.0.0.1:6379&gt; eval &#39;return {struct.unpack(&quot;HH&quot;, ARGV[1])}&#39; 0 &quot;\x01\x00\x02\x00&quot;&#x000A;1) (integer) 1&#x000A;2) (integer) 2&#x000A;3) (integer) 5&#x000A;127.0.0.1:6379&gt; eval &#39;return struct.size(&quot;HH&quot;)&#39; 0&#x000A;(integer) 4&#x000A;</code></pre>
        
        <h3>CJSON</h3>
        
        <p>The CJSON library provides extremely fast JSON manipulation within Lua.</p>
        
        <p>Example:</p>
        
        <pre><code>redis 127.0.0.1:6379&gt; eval &#39;return cjson.encode({[&quot;foo&quot;]= &quot;bar&quot;})&#39; 0&#x000A;&quot;{\&quot;foo\&quot;:\&quot;bar\&quot;}&quot;&#x000A;redis 127.0.0.1:6379&gt; eval &#39;return cjson.decode(ARGV[1])[&quot;foo&quot;]&#39; 0 &quot;{\&quot;foo\&quot;:\&quot;bar\&quot;}&quot;&#x000A;&quot;bar&quot;&#x000A;</code></pre>
        
        <h3>cmsgpack</h3>
        
        <p>The cmsgpack library provides simple and fast MessagePack manipulation within Lua.</p>
        
        <p>Example:</p>
        
        <pre><code>127.0.0.1:6379&gt; eval &#39;return cmsgpack.pack({&quot;foo&quot;, &quot;bar&quot;, &quot;baz&quot;})&#39; 0&#x000A;&quot;\x93\xa3foo\xa3bar\xa3baz&quot;&#x000A;127.0.0.1:6379&gt; eval &#39;return cmsgpack.unpack(ARGV[1])&#39; 0 &quot;\x93\xa3foo\xa3bar\xa3baz&#x000A;1) &quot;foo&quot;&#x000A;2) &quot;bar&quot;&#x000A;3) &quot;baz&quot;&#x000A;</code></pre>
        
        <h3>redis.sha1hex</h3>
        
        <p>Perform the SHA1 of the input string.</p>
        
        <p>Example:</p>
        
        <pre><code>127.0.0.1:6379&gt; eval &#39;return redis.sha1hex(ARGV[1])&#39; 0 &quot;foo&quot;&#x000A;&quot;0beec7b5ea3f0fdbc95d0dd47f3c5bc275da8a33&quot;&#x000A;</code></pre>
        
        <h2>Emitting Redis logs from scripts</h2>
        
        <p>It is possible to write to the Redis log file from Lua scripts using the
        <code>redis.log</code> function.</p>
        
        <pre><code>redis.log(loglevel,message)&#x000A;</code></pre>
        
        <p><code>loglevel</code> is one of:</p>
        
        <ul>
        <li><code>redis.LOG_DEBUG</code></li>
        <li><code>redis.LOG_VERBOSE</code></li>
        <li><code>redis.LOG_NOTICE</code></li>
        <li><code>redis.LOG_WARNING</code></li>
        </ul>
        
        <p>They correspond directly to the normal Redis log levels.
        Only logs emitted by scripting using a log level that is equal or greater than
        the currently configured Redis instance log level will be emitted.</p>
        
        <p>The <code>message</code> argument is simply a string.
        Example:</p>
        
        <pre><code>redis.log(redis.LOG_WARNING,&quot;Something is wrong with this script.&quot;)&#x000A;</code></pre>
        
        <p>Will generate the following:</p>
        
        <pre><code>[32343] 22 Mar 15:21:39 # Something is wrong with this script.&#x000A;</code></pre>
        
        <h2>Sandbox and maximum execution time</h2>
        
        <p>Scripts should never try to access the external system, like the file system or
        any other system call.
        A script should only operate on Redis data and passed arguments.</p>
        
        <p>Scripts are also subject to a maximum execution time (five seconds by default).
        This default timeout is huge since a script should usually run in under a
        millisecond.
        The limit is mostly to handle accidental infinite loops created during
        development.</p>
        
        <p>It is possible to modify the maximum time a script can be executed with
        millisecond precision, either via <code>redis.conf</code> or using the CONFIG GET / CONFIG
        SET command.
        The configuration parameter affecting max execution time is called
        <code>lua-time-limit</code>.</p>
        
        <p>When a script reaches the timeout it is not automatically terminated by Redis
        since this violates the contract Redis has with the scripting engine to ensure
        that scripts are atomic.
        Interrupting a script means potentially leaving the dataset with half-written
        data.
        For this reasons when a script executes for more than the specified time the
        following happens:</p>
        
        <ul>
        <li>Redis logs that a script is running too long.</li>
        <li>It starts accepting commands again from other clients, but will reply with a
        BUSY error to all the clients sending normal commands.
        The only allowed commands in this status are <code>SCRIPT KILL</code> and <code>SHUTDOWN&#x000A;NOSAVE</code>.</li>
        <li>It is possible to terminate a script that executes only read-only commands
        using the <code>SCRIPT KILL</code> command.
        This does not violate the scripting semantic as no data was yet written to the
        dataset by the script.</li>
        <li>If the script already called write commands the only allowed command becomes
        <code>SHUTDOWN NOSAVE</code> that stops the server without saving the current data set on
        disk (basically the server is aborted).</li>
        </ul>
        
        <h2>EVALSHA in the context of pipelining</h2>
        
        <p>Care should be taken when executing <a href="evalsha">EVALSHA</a> in the context of a pipelined
        request, since even in a pipeline the order of execution of commands must be
        guaranteed.
        If <a href="evalsha">EVALSHA</a> will return a <code>NOSCRIPT</code> error the command can not be reissued
        later otherwise the order of execution is violated.</p>
        
        <p>The client library implementation should take one of the following approaches:</p>
        
        <ul>
        <li><p>Always use plain <a href="eval">EVAL</a> when in the context of a pipeline.</p></li>
        <li><p>Accumulate all the commands to send into the pipeline, then check for <a href="eval">EVAL</a>
        commands and use the <code>SCRIPT EXISTS</code> command to check if all the scripts are
        already defined.
        If not, add <code>SCRIPT LOAD</code> commands on top of the pipeline as required, and
        use <a href="evalsha">EVALSHA</a> for all the <a href="eval">EVAL</a> calls.</p></li>
        </ul>
      </article>
    </div>
    <div class='text' id='comments'>
      <div id='disqus_thread'></div>
      <script type='text/javascript'>
        //<![CDATA[
          var disqus_shortname = 'redisio';
          
          // The following are highly recommended additional parameters. Remove the slashes in front to use.
          var disqus_identifier = 'command_eval';
          var disqus_url = 'http://redis.io/commands/eval';
          
          /* * * DON'T EDIT BELOW THIS LINE * * */
          (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
              dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
              (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
          })();
        //]]>
      </script>
      <a class='dsq-brlink' href='http://disqus.com'>
        Comments powered by
        <span class='logo-disqus'>
          Disqus
        </span>
      </a>
    </div>
    <footer>
      <p>
        This website is
        <a href="https://github.com/antirez/redis-io">open source software</a>
        developed by <a href="http://citrusbyte.com">Citrusbyte</a>.
        <br> The Redis logo was designed by <a href="http://www.carlosprioglio.com/">Carlos Prioglio</a>. See more <a href="../topics/sponsors">credits</a>.
      </p>
      <div class='sponsor'>
        Sponsored by
        <a href='http://www.gopivotal.com/products/redis'>
          <img alt='Redis Support' height='25' src='../images/pivotal.png' title='Redis Sponsor' width='99' />
        </a>
      </div>
    </footer>
  </body>
</html>
<script type="text/javascript">
lloogg_clientid = "20bb9c026e";
</script>
<script type="text/javascript" src="http://demo.lloogg.com/l.js?c=20bb9c026e">
</script>
